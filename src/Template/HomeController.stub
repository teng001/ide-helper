<?php

namespace App\Http\Controllers\Home;

use App\Exceptions\ApiException;
use App\Http\Controllers\Controller;
use App\Http\Requests\Home\{{$upperName}}Request;
use App\Models\{{$upperName}};
use App\Models\User;
use App\Services\{{$upperName}}Service;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Auth\Access\AuthorizationException;

class {{$upperName}}Controller extends Controller
{
    /**
     * @var {{$upperName}}Service
     */
    protected ${{$lowerName}}Service;

    /**
     * {{$upperName}}Controller constructor.
     * @param {{$upperName}}Service ${{$lowerName}}Service
     */
    public function __construct({{$upperName}}Service ${{$lowerName}}Service)
    {
        $this->{{$lowerName}}Service = ${{$lowerName}}Service;
    }

    /**
     * @param Request $request
     * @return JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        /** @var User $user */
        $user = $request->user();
        $params = $request->all();
        $items = $this->{{$lowerName}}Service->userSearch($params, $user);
        return $this->table($items->items(), $items->total());
    }

    /**
     * @param {{$upperName}}Request $request
     * @return JsonResponse
     * @throws ApiException
     */
    public function store({{$upperName}}Request $request): JsonResponse
    {
        /** @var User $user */
        $user = $request->user();
        $params = $request->all();
        $data = $this->{{$lowerName}}Service->store($params, $user);

        return $this->success('创建成功', $data);
    }

    /**
     * @param {{$upperName}} ${{$lowerName}}
     * @param {{$upperName}}Request $request
     * @return JsonResponse
     * @throws AuthorizationException|ApiException
     */
    public function update({{$upperName}} ${{$lowerName}}, {{$upperName}}Request $request): JsonResponse
    {
        $this->authorize('own', ${{$lowerName}});
        $data = $request->all();
        return $this->success('修改成功', $this->{{$lowerName}}Service->update(${{$lowerName}}, $data));
    }

    /**
     * @param {{$upperName}} ${{$lowerName}}
     * @return JsonResponse
     * @throws AuthorizationException
     */
    public function destroy({{$upperName}} ${{$lowerName}}): JsonResponse
    {
        $this->authorize('own', ${{$lowerName}});
        ${{$lowerName}}->delete();
        return $this->success('删除成功');
    }
}
